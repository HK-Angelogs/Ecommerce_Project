#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const os = require('os');

// Detect current platform and architecture
function getPlatformInfo() {
	const platform = os.platform();
	const arch = os.arch();

	// Map Node.js arch names to Go arch names
	let goArch = arch;
	if (arch === 'x64') {
		goArch = 'amd64';
	}

	let goPlatform = platform;
	
	return { platform: goPlatform, arch: goArch };
}

// Setup platform-specific binaries
function setupBinaries() {
	const { platform, arch } = getPlatformInfo();
	const platformSuffix = `${platform}-${arch}`;
	
	console.log(`Setting up Cline CLI for ${platformSuffix}...`);

	const binDir = path.join(__dirname, 'bin');
	
	// Check if platform-specific binaries exist
	const clineSource = path.join(binDir, `cline-${platformSuffix}`);
	const clineHostSource = path.join(binDir, `cline-host-${platformSuffix}`);
	
	if (!fs.existsSync(clineSource)) {
		console.error(`Error: Binary not found for platform ${platformSuffix}`);
		console.error(`Expected: ${clineSource}`);
		console.error(`Supported platforms: darwin-arm64, darwin-amd64, linux-amd64, linux-arm64`);
		process.exit(1);
	}
	
	if (!fs.existsSync(clineHostSource)) {
		console.error(`Error: Binary not found for platform ${platformSuffix}`);
		console.error(`Expected: ${clineHostSource}`);
		process.exit(1);
	}

	// Create symlinks or copies to the generic names
	const clineTarget = path.join(binDir, 'cline');
	const clineHostTarget = path.join(binDir, 'cline-host');
	
	// Remove existing files if they exist
	[clineTarget, clineHostTarget].forEach(target => {
		if (fs.existsSync(target)) {
			try {
				fs.unlinkSync(target);
			} catch (e) {
				console.warn(`Warning: Could not remove existing file ${target}: ${e.message}`);
			}
		}
	});
	
	// On Unix, create symlinks; on Windows, copy files
	if (platform === 'win32') {
		// Windows: copy files
		fs.copyFileSync(clineSource, clineTarget);
		fs.copyFileSync(clineHostSource, clineHostTarget);
		console.log('✓ Copied platform-specific binaries');
	} else {
		// Unix: create symlinks
		fs.symlinkSync(path.basename(clineSource), clineTarget);
		fs.symlinkSync(path.basename(clineHostSource), clineHostTarget);
		console.log('✓ Created symlinks to platform-specific binaries');
		
		// Make binaries executable
		try {
			fs.chmodSync(clineSource, 0o755);
			fs.chmodSync(clineHostSource, 0o755);
			fs.chmodSync(clineTarget, 0o755);
			fs.chmodSync(clineHostTarget, 0o755);
		} catch (error) {
			console.warn(`Warning: Could not set executable permissions: ${error.message}`);
		}
	}

	// Check ripgrep binary
	const rgBinary = platform === 'win32' ? 'rg.exe' : 'rg';
	const rgPath = path.join(__dirname, rgBinary);
	
	if (!fs.existsSync(rgPath)) {
		console.error(`Error: ripgrep binary not found at ${rgPath}`);
		process.exit(1);
	}

	// Make ripgrep executable (Unix only)
	if (platform !== 'win32') {
		try {
			fs.chmodSync(rgPath, 0o755);
		} catch (error) {
			console.warn(`Warning: Could not set ripgrep executable permissions: ${error.message}`);
		}
	}

	console.log('✓ Cline CLI installation complete');
	console.log('');
	console.log('Usage:');
	console.log('  cline        - Start Cline CLI');
	console.log('  cline-host   - Start Cline host service');
	console.log('');
	console.log('Documentation: https://docs.cline.bot');
}

try {
	setupBinaries();
} catch (error) {
	console.error(`Installation failed: ${error.message}`);
	console.error('Please report this issue at: https://github.com/cline/cline/issues');
	process.exit(1);
}
